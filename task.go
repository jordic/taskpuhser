package taskpusher

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"
)

// A Task is something that is runnable, and gets and output
type Tasker interface {
	// Runs the task, receives a singal channel to notify when ends
	Run(s chan string)
	// Status, retreives current status for task
	Status() int
	// Returns a string uid generated for unique task handling
	UID() string
	// Sets status For a given task.
	SetStatus(s int)
	json.Marshaler
}

const (
	// Task is stopped and awaiting to run
	StateStopped = iota
	// Task is currently in progress
	StateRunning
	// Task has ended succesaful
	StateSuccessful
	// Task has ended with some kind of error
	StateErroneous
)

// A WebTask is an implementation of task, that currently runs
// a remote url
type WebTask struct {
	// Unique ID field
	ID string
	// URL to call for handling the task.. should include the get arguments.
	URL    string
	status int
	// Total Duration of the task, after run
	Duration time.Duration
	// Error reported by the runner
	Error error
	// Response content generated by the task
	Response string
	// Client for implementing custom http clients (https/timeouts/etc...)
	// Default implementation, just uses default net/http client.
	Client *http.Client
}

// UID is a unique identifier for the task
func (w *WebTask) UID() string {
	return w.ID
}

// Runs the task. Fetches the url.
// The webhandler expressed by url, should reply with a
// 200 (StatusOK) if not, task is considered erroneous
func (w *WebTask) Run(s chan string) {

	if w.Client == nil {
		w.Client = http.DefaultClient
	}

	t := time.Now()
	

	resp, err := w.Client.Get(w.URL)
	if err != nil {
		w.Error = err
		w.status = StateErroneous
		w.Duration = time.Now().Sub(t)
		s <- w.UID()
		return
	}

	if resp.StatusCode != http.StatusOK {
		w.Error = fmt.Errorf("wrong status response: %s", resp.StatusCode)
		w.status = StateErroneous
		w.Duration = time.Now().Sub(t)
		s <- w.UID()
		return
	}

	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		w.Error = err
		w.status = StateErroneous
		w.Duration = time.Now().Sub(t)
		s <- w.UID()
		return
	}

	w.status = StateSuccessful
	w.Duration = time.Now().Sub(t)
	w.Response = string(body)
	s <- w.UID()
	return
}

// Status of the task.
func (w *WebTask) Status() int {
	return w.status
}

// SetStatus of the task.
func (w *WebTask) SetStatus( s int )  {
	w.status = s
}


func (w *WebTask) MarshalJSON() ([]byte, error) {

	a := struct {
		ID       string
		Type     string
		Status   int
		Response string
	}{
		w.UID(),
		"SlowTask",
		w.status,
		w.Response,
	}
	return json.Marshal(a)
}

var taskTypes = make(map[string]func() Tasker)


// Register a new task type to be handled
func RegisterTaskType(t string, fn func()Tasker) {
	taskTypes[t] = fn
}

// Factory creates a new task instance from a string
func FactoryTask(ty string) Tasker {
	return taskTypes[ty]()
}

func init() {
	RegisterTaskType("WebTask", func() Tasker { return &WebTask{} })
}